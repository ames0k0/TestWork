## Задача

Разработать систему обработки данных с использованием Prefect 3.0, которая выполняет следующие шаги:

1. Загружает данные из CSV-файла.
2. Для каждой строки CSV-файла выполняет запрос к стороннему API.
3. Обрабатывает полученные данные с использованием pandas.
4. Сохраняет результаты в виде JSON-файлов в локальную файловую систему.
5. Отправляет уведомление о завершении в Telegram чат.

## Требования

1. Использовать Prefect 3.0 с deployments, work pool и workers.
2. Реализовать различные виды лимитов:
   a. Ограничение на количество одновременно выполняемых задач (concurrency limit).
   b. Ограничение скорости выполнения задач (rate limiting).
   c. Ограничение на использование ресурсов (memory, CPU) для workers.
3. Реализовать систему очередей для ограничения одновременных запросов к API.
4. Добавить обработку ошибок и повторные попытки для запросов к API с использованием Prefect retries.
5. Реализовать логирование процесса обработки данных с использованием Prefect logging.
6. Написать Docker-файл для приложения с настройкой ограничений ресурсов.
7. Реализовать параллельную обработку данных с использованием Prefect concurrent.futures.
8. Добавить мониторинг выполнения flow с использованием Prefect UI.
9. Обеспечить, чтобы каждый worker мог выполнять задачи не чаще чем 1 раз в 30 секунд.
10. Гарантировать, что worker не может выполнять параллельные запросы (только последовательное выполнение).

## Дополнительные задания (по желанию)

1. Реализовать динамическое изменение лимитов в зависимости от нагрузки.
2. Добавить систему кэширования для оптимизации запросов к API с использованием Prefect caching.
3. Реализовать автоматическое масштабирование workers в зависимости от нагрузки, учитывая ограничения на частоту выполнения задач.
4. Добавить визуализацию результатов работы flow с использованием Prefect artifacts.
5. Реализовать механизм "отложенного выполнения" для задач, которые не могут быть выполнены из-за ограничения частоты.

## Ожидаемые результаты

1. Исходный код приложения на GitHub.
2. Docker-файл для сборки и запуска приложения.
3. README.md с инструкциями по установке, настройке и запуску приложения.
4. Краткая документация по архитектуре решения и принятым решениям, особенно в отношении реализованных лимитов и ограничений worker'ов.
5. Примеры конфигурационных файлов для Prefect и Docker.
6. Скриншоты или экспортированные данные из Prefect UI, демонстрирующие работу системы и применение лимитов.
7. Отчет о производительности системы, показывающий соблюдение ограничений на частоту выполнения задач и последовательное выполнение запросов.

## Критерии оценки

1. Корректность работы приложения и соблюдение всех заданных лимитов и ограничений.
2. Качество и чистота кода, правильное использование возможностей Prefect 3.0.
3. Эффективность обработки данных и использования ресурсов.
4. Масштабируемость и отказоустойчивость решения.
5. Полнота документации и инструкций.
6. Использование best practices в работе с Prefect, Docker и управлении ресурсами.
7. Реализация и обоснование выбора различных видов лимитов.
8. Корректная реализация ограничений на частоту выполнения задач (1 раз в 30 секунд) и последовательное выполнение запросов для каждого worker'а.

Удачи в выполнении задания!